#!/bin/bash
export PS1_HOSTNAME=${PS1_HOSTNAME:-$HOST}
export PS1_HOSTCOLOR=${PS1_HOSTCOLOR:-'$fg_bold[green]'}
export EDITOR=vim
export NICKNAME=iped


is_zsh() {
    [[ $(basename $SHELL) == "zsh" ]]
}
is_bash() {
    [[ $(basename $SHELL) == "bash" ]]
}

if is_zsh; then
    HERE=$(dirname $0)
elif is_bash; then
    HERE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
fi

export PATH="$PATH:$HERE/bin:$(realpath $HERE/../git/bin)"
if ! which realpath > /dev/null 2> /dev/null; then
    alias realpath=_realpath;
fi

if is_zsh; then
    if [[ ! -e ${HERE}/shellrc-cfg.yml ]]; then
        cp ${HERE}/shellrc-cfg-default.yml ${HERE}/shellrc-cfg.yml
    fi
    eval "$(ymlook --eval $HERE/shellrc-cfg.yml zsh prompt)"

    if [[ ${ps1} != "" ]]; then
        export PROMPT=${(e)ps1}
        if [[ ${SHOW_DIRTY_GIT_PROMPT:-1} == 1 ]]; then
            RPS1='$ZSH_THEME_GIT_PROMPT_PREFIX$(git_current_branch)$ZSH_THEME_GIT_PROMPT_SUFFIX'
        fi
    fi
fi

source "$HERE/better-ssh/shellrc"

acti() {
    if [[ $# == 0 ]]; then
        if [[ -f "$1/bin/activate" ]]; then
            source "$1/bin/activate"
        fi
        BASEDIR="$1"
    else
        BASEDIR="."
    fi
    select ENVDIR in */*/activate; do
        if [[ $ENVDIR == "" ]]; then
            return 1;
        else
            break;
        fi
    done
    source "$ENVDIR/bin/activate"
}

_f0() {
    is_zsh && echo "$funcstack[2]" || echo ${FUNCNAME[1]};
}

anyconda() {
    # There is likely a better way to find active environment
    if [[ ! $CONDA_SHLVL > 0 ]]; then
        if [[ "$VIRTUAL_ENV" == "" ]]; then
            conda activate all;
        fi
    fi
}

if [[ "$AUTOCONDA" == 1 ]]; then
    alias jupyter='unalias jupyter && anyconda && jupyter'
    alias imypy='unalias imypy && anyconda && mypy --ignore-missing-imports'
    alias flake8='unalias flake8 && anyconda && flake8 --max-line-length=88'
    alias python='unalias python && anyconda && python'
fi


finddirs() {
    if [[ $# == 0 ]]; then
        echo "Provide filetype"
        return 1
    fi
    find $@ | sed 's|\(\./[^/]*/\).*|\1|g' | uniq
}

pydirs() {
    setopt NULL_GLOB
    DIRS=$(finddirs -name '*.py')
    for ENV_FILE in */*/activate; do
        ENV_DIR=$(dirname $(dirname $ENV_FILE))
        DIRS=$(grep -v $ENV_DIR <<< $DIRS)
    done
    DIRS=($(grep -v .jupyter <<< $DIRS))
    choose_one --multi $DIRS
}

if_nargs() {
    if [[ $# > 1 ]]; then
        shift
        echo "${@[*]}";
    else
        $1;
    fi
}

pyfiles() {
    for DIR in $@; do
        find $DIR -name '*.py' | grep -v '.ipynb' | grep -v '.vscode'
    done
}

black-dir() {
    DIRS=( $(if_nargs pydirs $@) )
    anyconda
    pyfiles $DIRS | xargs black
}

flake-dir() {
    DIRS=( $(if_nargs pydirs $@) )
    anyconda
    pyfiles $DIRS | xargs flake8 --max-line-length=88
}

mypy-dir() {
    DIRS=( $(if_nargs pydirs $@) )
    anyconda
    pyfiles $DIRS | xargs mypy
}

pylint-dir() {
    DIRS=( $(if_nargs pydirs $@) )
    anyconda
    flake-dir $DIRS
    mypy-dir $DIRS
}

xfcopy() {
    if [[ $# != 1 ]]; then
        echo "usage: $(_f0) filename"
        return 1;
    fi
    xclip -i -sel c -f < $1 | xclip -i -sel p
}
alias xcopy="xclip -i -sel c -f | xclip -i -sel p"
alias xopen='xdg-open'
